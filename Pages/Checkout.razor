@page "/checkout"
@inject OrderState OrderState
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@implements IDisposable

<div class="main">
    <EditForm EditContext="editContext" OnSubmit=PlaceOrder>
    <div class="checkout-cols">
       <div class="checkout-order-details">
            <h4>Review order</h4>
            <OrderReview Order="Order" />
        </div>
            @* @foreach (var pizza in Order.Pizzas)
            {
                <p>
                    <strong>
                        @(pizza.Size)"
                        @pizza.Special.Name
                        (£@pizza.GetFormattedTotalPrice())
                    </strong>
                </p>
            }

            <p>
                <strong>
                    Total price:
                    £@Order.GetFormattedTotalPrice()
                </strong>
            </p> *@
        <div class="checkout-delivery-address">
            <h4>Deliver to...</h4>
        @if (isError){
            <div class="alert alert-danger">Please enter all address fields.</div>
                }
            <AddressEditor Address="Order.DeliveryAddress" />
        </div>
    </div>

    <button class="checkout-button btn btn-warning" type="submit" disabled=@isError>
      Place order
    </button>
    <DataAnnotationsValidator />
    </EditForm>
    </div>

@code {
    Order Order => OrderState.Order;
    bool isSubmitting;
    bool isError = false;
    private EditContext editContext;
    protected void ShowError()
    {
        isError = true;
    } 
    protected override void OnInitialized()
    {
        editContext = new EditContext(Order.DeliveryAddress);
        editContext.OnFieldChanged += HandleFieldChanged;
    }
    private void HandleFieldChanged(object sender, FieldChangedEventArgs e)
    {
        isError = !editContext.Validate();
        StateHasChanged();
    }
   async Task PlaceOrder()
    {
        var response = await HttpClient.PostAsJsonAsync(NavigationManager.BaseUri + "orders", OrderState.Order);
        var newOrderId= await response.Content.ReadFromJsonAsync<int>();
        OrderState.ResetOrder();
        NavigationManager.NavigateTo($"myorders/{newOrderId}");
    }

    private async Task CheckSubmission(EditContext editContext)
    {
        isSubmitting = true;
        var model = editContext.Model as Address;
        isError = string.IsNullOrEmpty(model.Name) 
        || string.IsNullOrEmpty(model.Line1) 
        || string.IsNullOrEmpty(model.PostalCode);
        if (isError)
        {
             await PlaceOrder();
        }
        isSubmitting = false;
    }
    public void Dispose()
    {
        editContext.OnFieldChanged -= HandleFieldChanged;
    }

}